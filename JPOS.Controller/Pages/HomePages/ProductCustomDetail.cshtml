@page "{idProduct:int}"
@model JPOS.Controller.Pages.HomePages.ProductCustomDetailModel
@{
}
<div class="container">
    <div class="row">
        <!-- Picture Column -->
        <div class="col-md-4">
            <img src="@Model.Product.Image" class="img-fluid" style="height: 300px; object-fit: cover;" alt="@Model.Product.ProductName" />
        </div>

        <!-- Information Column -->
        <div class="col-md-8">
            <form method="post">
                <div class="card">
                    <div class="card-body">
                        <h4>@Model.Product.ProductName</h4>
                        <p class="card-text">@Model.Product.Description</p>
                      @*   <p class="card-text"> Total Price:
                            @Model.Total
                                $</p> *@
                        <p class="card-text">
                            Process Price:
                            @Model.Product.ProcessPrice
                            $
                        </p>
                        <p class="card-text">
                            Design Price:
                            @Model.Product.PriceDesign
                            $
                        </p>
                        <div class="card" style="width: 18rem;">
                            <ul class="list-group list-group-flush" id="materialsList">
                                @for (int i = 0; i < Model.Materials.Count; i++)
                                {
                                    <li class="list-group-item">
                                        Name: @Model.Materials[i].Material.Name -                                      
                                        Quantity: <input type="number" min="0.1" value="@Model.Materials[i].Quantity" name="Materials[@i].Quantity" data-index="@i" class="material-quantity" step="0.1" /> -
                                        Price: <span class="material-price"> @Model.Materials[i].Price</span> $
                                        <input type="hidden" name="Materials[@i].MaterialId" value="@Model.Materials[i].MaterialId" />
                                        <input type="hidden" name="Materials[@i].Price" value="@Model.Materials[i].Price" />
                                    </li>
                                }
                            </ul>
                        </div>
                        <p>New Total Materials Price: <span id="totalPrice">@Model.TotalPrice</span> $</p>
                        <input type="hidden" name="TotalPrice" id="hiddenTotalPrice" value="@Model.TotalPrice" />
                        <input type="hidden" name="ProductId" value="@Model.Product.ProductId" />
                        <button class="btn btn-primary" type="submit" style="background-color: #FF6B6B; color: #FFFFFF;">Buy Now</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const materialQuantities = document.querySelectorAll('.material-quantity');
            const totalPriceElement = document.getElementById('totalPrice');
            const hiddenTotalPriceElement = document.getElementById('hiddenTotalPrice');
            const materialsList = document.querySelectorAll('.list-group-item');

            materialQuantities.forEach(input => {
                input.addEventListener('input', updatePrices);
            });

            function updatePrices() {
                let totalPrice = 0;

                materialsList.forEach((item, index) => {
                    const quantityInput = item.querySelector('.material-quantity');
                    const priceElement = item.querySelector('.material-price');
                    const originalQuantity = parseFloat(quantityInput.getAttribute('data-original-quantity'));
                    const originalPrice = parseFloat(priceElement.getAttribute('data-original-price'));
                    const newQuantity = parseFloat(quantityInput.value);

                    const newPrice = (originalPrice / originalQuantity) * newQuantity;
                    priceElement.innerText = newPrice.toFixed(2);
                    totalPrice += newPrice;
                });

                totalPriceElement.innerText = totalPrice.toFixed(2);
                hiddenTotalPriceElement.value = totalPrice.toFixed(2);
            }

            // Store original quantities and prices in data attributes
            materialsList.forEach(item => {
                const quantityInput = item.querySelector('.material-quantity');
                const priceElement = item.querySelector('.material-price');
                const originalQuantity = parseFloat(quantityInput.value);
                const originalPrice = parseFloat(priceElement.innerText);

                quantityInput.setAttribute('data-original-quantity', originalQuantity);
                priceElement.setAttribute('data-original-price', originalPrice);
            });

            // Initial calculation
            updatePrices();
        });
    </script>
}
